# Copyright 2020 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pw_build/error.gni")
import("$dir_pw_third_party/abseil-cpp/abseil-cpp.gni")
import("$dir_pw_third_party/fuzztest/fuzztest.gni")
import("$dir_pw_third_party/re2/re2.gni")
import("$dir_pw_toolchain/host_clang/toolchains.gni")
import("$dir_pw_unit_test/test.gni")

# Creates a libFuzzer-based fuzzer executable target and unit test
#
# This will link `sources` and `deps` with the libFuzzer compiler runtime. The
# `sources` and `deps` should include a definition of the standard LLVM fuzz
# target function, `LLVMFuzzerTestOneInput`. For more details, see:
#   //pw_fuzzer/docs.rst
#   https://llvm.org/docs/LibFuzzer.html
#
# Additionally, this creates a unit test that does not generate fuzzer inputs
# and simply executes the fuzz target function with fixed inputs. This is useful
# for verifying the fuzz target function compiles, links, and runs even when not
# using a fuzzing-capable host or toolchain.
#
# Args:
#   - enable_test_if: (optional) Passed as `enable_if` to the unit test.
#   Remaining arguments are the same as `pw_executable`.
#
template("pw_fuzzer") {
  if (!pw_toolchain_FUZZING_ENABLED) {
    pw_error(target_name) {
      message_lines = [ "Toolchain does not enable fuzzing." ]
    }
    not_needed(invoker, "*")
  } else if (pw_toolchain_SANITIZERS == []) {
    pw_error(target_name) {
      message_lines = [ "No sanitizer runtime set." ]
    }
    not_needed(invoker, "*")
  } else {
    pw_executable(target_name) {
      configs = []
      deps = []
      forward_variables_from(invoker,
                             "*",
                             [
                               "enable_test_if",
                               "visibility",
                             ])
      forward_variables_from(invoker, [ "visibility" ])
      configs += [ "$dir_pw_fuzzer:engine" ]
      deps += [ dir_pw_fuzzer ]
    }
  }

  pw_test("${target_name}_test") {
    deps = []
    forward_variables_from(invoker, "*", [ "visibility" ])
    forward_variables_from(invoker, [ "visibility" ])
    deps += [ "$dir_pw_fuzzer:run_as_unit_test" ]
    enable_if = !defined(enable_test_if) || enable_test_if
  }
}

# Creates a FuzzTest-based fuzzer.
#
# FuzzTest integrates directly with GoogleTest, so the resulting executables can
# be used as either fuzzers or unit tests. Fuzz tests are declared for test
# suites by using the `FUZZ_TEST` macro with a function, e.g.:
#
#   #include "fuzztest/fuzztest.h"
#
#   using namespace fuzztest;
#
#   void MyTargetFunction(int a, std::string b) { ... }
#
#   FUZZ_TEST(MyTestSuite, MyTargetFunction)
#     .WithDomains(NonZero<int>(), PrintableAsciiString())
#     .WithSeeds({42, "life, the universe and everything"});
#
# For more details on this macro and the `WithDomains` and `WithSeeds` methods,
# see:
#   https://github.com/google/fuzztest/blob/main/doc/fuzz-test-macro.md
#
# FuzzTest is not available if `dir_pw_third_party_fuzztest` is not set, if the
# toolchain does not have fuzzing instrumentation enabled, or if the toolchain
# does not have any sanitizers enabled. In this case, the `FUZZ_TEST` macro and
# its associated methods are ignored and this template acts exaclt like
# `pw_test`.
#
# Arguments are exactly the same as `pw_test`.
template("pw_fuzz_test") {
  pw_test(target_name) {
    deps = []
    configs = []
    forward_variables_from(invoker, "*")
    if (dir_pw_third_party_fuzztest != "" && pw_toolchain_FUZZING_ENABLED &&
        pw_toolchain_SANITIZERS != []) {
      test_main = ""
      test_main = "$dir_pw_third_party/fuzztest/fuzztest:fuzztest_gtest_main"
      deps += [ "$dir_pw_third_party/fuzztest/fuzztest" ]
      configs += [
        "$dir_pw_third_party/abseil-cpp/configs:disabled_warnings",
        "$dir_pw_third_party/re2/configs:disabled_warnings",
        "$dir_pw_third_party/fuzztest/configs:disabled_warnings",
      ]
    } else {
      deps += [ "$dir_pw_fuzzer:fuzz_test_stub" ]
    }
  }
}
