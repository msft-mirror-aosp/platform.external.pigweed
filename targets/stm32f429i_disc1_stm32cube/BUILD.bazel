# Copyright 2021 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load(
    "//pw_build:pigweed.bzl",
    "pw_cc_binary",
    "pw_linker_script",
)

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

cc_library(
    name = "freertos_config",
    hdrs = [
        "config/FreeRTOSConfig.h",
    ],
    includes = ["config/"],
    target_compatible_with = [":freertos_config_cv"],
    deps = ["//third_party/freertos:config_assert"],
)

# Constraint value corresponding to :freertos_config.
#
# If you include this in your platform definition, you will tell Bazel to use
# the :freertos_config defined above when compiling FreeRTOS.  (See
# //third_party/freertos/BUILD.bazel.) If you include it in a target's
# `target_compatible_with`, you will tell Bazel the target can only be built
# for platforms that specify this FreeRTOS config.
constraint_value(
    name = "freertos_config_cv",
    constraint_setting = "@freertos//:freertos_config_setting",
)

# TODO: b/301334234 - Set the flags currently in the stm32f429i config in
# .bazelrc using this platform, once that's supported.
platform(
    name = "platform",
    constraint_values = [
        ":freertos_config_cv",
        "//pw_build/constraints/rtos:freertos",
        "//pw_interrupt_cortex_m:backend",
        "//pw_malloc_freelist:backend",
        "//pw_sys_io_stm32cube:backend",
        "@freertos//:port_ARM_CM4F",
        "@freertos//:disable_task_statics",
        "@platforms//cpu:armv7e-m",
        "@pw_toolchain//constraints/arm_mcpu:cortex-m4",
    ],
)

cc_library(
    name = "hal_config",
    hdrs = [
        "config/stm32f4xx_hal_conf.h",
    ],
    includes = ["config"],
)

cc_library(
    name = "pre_init",
    srcs = [
        "boot.cc",
        "vector_table.c",
    ],
    copts = ["-Wno-return-type"],
    defines = ["PW_MALLOC_ACTIVE=1"],
    target_compatible_with = [":freertos_config_cv"],
    deps = [
        ":freertos_config",
        "//pw_assert",
        "//pw_boot",
        "//pw_boot_cortex_m",
        "//pw_malloc",
        "//pw_preprocessor",
        "//pw_string",
        "//pw_sys_io_stm32cube",
        "//pw_system:init",
        "//third_party/stm32cube",
        "@freertos",
    ],
    alwayslink = 1,
)

pw_linker_script(
    name = "linker_script",
    defines = [
        "PW_BOOT_FLASH_BEGIN=0x08000200",
        "PW_BOOT_FLASH_SIZE=2048K",

        # TODO(b/235348465): Currently "pw_tokenizer/detokenize_test" requires at
        # least 6K bytes in heap when using pw_malloc_freelist. The heap size
        # required for tests should be investigated.
        "PW_BOOT_HEAP_SIZE=7K",
        "PW_BOOT_MIN_STACK_SIZE=1K",
        "PW_BOOT_RAM_BEGIN=0x20000000",
        "PW_BOOT_RAM_SIZE=192K",
        "PW_BOOT_VECTOR_TABLE_BEGIN=0x08000000",
        "PW_BOOT_VECTOR_TABLE_SIZE=512",
    ],
    linker_script = "//pw_boot_cortex_m:basic_cortex_m.ld",
)

pw_cc_binary(
    name = "demo",
    srcs = [
        "main.cc",
    ],
    target_compatible_with = [":freertos_config_cv"],
    deps = [
        "//pw_thread:thread",
        "//pw_thread:thread_core",
        "//pw_thread_freertos:thread",
        "@freertos",
    ],
)
