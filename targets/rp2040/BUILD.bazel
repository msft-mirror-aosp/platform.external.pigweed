# Copyright 2022 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load("//pw_build:pigweed.bzl", "pw_cc_binary")
load("//targets/rp2040:flash.bzl", "flash_rp2040")
load("//targets/rp2040:transition.bzl", "rp2040_binary")

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

config_setting(
    name = "pico_clang_build",
    constraint_values = [
        "//pw_build/constraints/chipset:rp2040",
    ],
    flag_values = {
        "@bazel_tools//tools/cpp:compiler": "clang",
    },
)

# This is an incomplete platform, do NOT try to pass this
# as a --platforms flag value. Use :rp2040 or :rp2350.
platform(
    name = "rp2_common",
    constraint_values = [
        "@freertos//:disable_task_statics",
        "freertos_config_cv",
        "//pw_build/constraints/chipset:rp2040",  # TODO: https://pwbug.dev/343487589 - Use Pico SDK constraints.
        "//pw_build/constraints/rtos:freertos",
        "//pw_cpu_exception:enabled",
        "//pw_interrupt_cortex_m:backend",
        "@rust_crates//:no_std",
        "@platforms//os:none",
    ],
    visibility = ["//visibility:private"],
)

platform(
    name = "rp2040",
    constraint_values = [
        "@freertos//:port_ARM_CM0",
        "@pico-sdk//bazel/constraint:rp2040",
        # For toolchain selection.
        "@platforms//cpu:armv6-m",
        "@pw_toolchain//constraints/arm_mcpu:cortex-m0plus",
    ],
    parents = [":rp2_common"],
)

platform(
    name = "rp2350",
    constraint_values = [
        "@freertos//:port_ARM_CM33_NTZ",
        "@pico-sdk//bazel/constraint:rp2350",
        # For toolchain selection.
        "@platforms//cpu:armv8-m",
        "@pw_toolchain//constraints/arm_mcpu:cortex-m33",
    ],
    parents = [":rp2_common"],
)

cc_library(
    name = "extra_platform_libs",
    deps = [
        ":pre_init",
        "//pw_tokenizer:linker_script",
        "@pico-sdk//src/rp2_common/pico_stdlib",
    ] + select({
        "@rules_cc//cc/compiler:clang": [
            "//pw_libcxx",
            "@pico-sdk//src/rp2_common/pico_clib_interface:llvm_libc_interface",
        ],
        "//conditions:default": [],
    }),
)

alias(
    name = "pico_sdk_clib_select",
    actual = select({
        "@rules_cc//cc/compiler:clang": "@pico-sdk//src/rp2_common/pico_clib_interface:llvm_libc_interface",
        "//conditions:default": "@pico-sdk//src/rp2_common/pico_clib_interface:newlib_interface",
    }),
)

cc_library(
    name = "freertos_config",
    hdrs = [
        "config/FreeRTOSConfig.h",
    ],
    includes = ["config/"],
    target_compatible_with = [":freertos_config_cv"],
    deps = [
        "//third_party/freertos:config_assert",
        "@pico-sdk//src/rp2_common/cmsis:cmsis_core",
    ],
)

constraint_value(
    name = "freertos_config_cv",
    constraint_setting = "@freertos//:freertos_config_setting",
)

cc_library(
    name = "unit_test_app",
    testonly = True,
    srcs = [
        "unit_test_app.cc",
    ],
    deps = [
        "//pw_status",
        "//pw_system",
        "//pw_unit_test:rpc_service",
    ],
    alwayslink = True,
)

# This is just a stub to silence warnings saying that boot.cc and *.h files are
# missing from the bazel build. There's no plans yet to do a Bazel build for
# the Pi Pico.
filegroup(
    name = "rp2040_files",
    srcs = [
        "config/rp2040_hal_config.h",
    ],
)

# This is a duplication of the contents of pigweed_module_config.h since we
# can't do a -include because copts do not propagate to dependencies.
cc_library(
    name = "pigweed_module_config",
    hdrs = ["config/pigweed_module_config.h"],
    defines = [
        # LINT.IfChange
        "PW_THREAD_FREERTOS_CONFIG_JOINING_ENABLED=1",
        "PW_ASSERT_BASIC_ACTION=PW_ASSERT_BASIC_ACTION_EXIT",
        # LINT.ThenChange(//targets/rp2040/config/pigweed_module_config.h)
    ],
)

cc_library(
    name = "pre_init",
    srcs = [
        "boot.cc",
    ],
    # TODO: b/261603269 - Get this to build.
    tags = ["manual"],
    target_compatible_with = [":freertos_config_cv"],
    deps = [
        ":freertos_config",
        "//pw_assert",
        "//pw_assert:backend_impl",
        "//pw_cpu_exception:entry_backend_impl",
        "//pw_string",
        "//pw_system:init",
        "//third_party/freertos:support",
        "@freertos",
        "@pico-sdk//src/rp2_common/hardware_exception:hardware_exception",
        "@pico-sdk//src/rp2_common/pico_stdlib",
    ],
    alwayslink = 1,
)

cc_library(
    name = "device_handler",
    srcs = [
        "device_handler.cc",
    ],
    includes = ["public"],
    deps = [
        "//pw_cpu_exception_cortex_m:snapshot",
        "//pw_system:device_handler.facade",
        "@pico-sdk//src/rp2_common/hardware_watchdog:hardware_watchdog",
    ],
)

pw_cc_binary(
    name = "system_async_example",
    testonly = True,
    srcs = ["system_async_example.cc"],
    deps = [
        "//pw_channel:rp2_stdio_channel",
        "//pw_libcxx",
        "//pw_multibuf:testing",
        "//pw_system:async",
        "//third_party/freertos:support",
        "@freertos",
        "@pico-sdk//src/rp2_common/pico_stdlib",
    ],
)

rp2040_binary(
    name = "rp2040_system_async_example",
    testonly = True,
    binary = ":system_async_example",
)

flash_rp2040(
    name = "flash_rp2040_system_async_example",
    testonly = True,
    rp2040_binary = ":rp2040_system_async_example",
)
