# Copyright 2023 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pw_async2/backend.gni")
import("$dir_pw_build/facade.gni")
import("$dir_pw_build/target_types.gni")
import("$dir_pw_chrono/backend.gni")
import("$dir_pw_docgen/docs.gni")
import("$dir_pw_sync/backend.gni")
import("$dir_pw_unit_test/test.gni")

config("public_include_path") {
  include_dirs = [ "public" ]
}

pw_source_set("poll") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_async2/poll.h" ]
}

pw_test("poll_test") {
  deps = [ ":poll" ]
  sources = [ "poll_test.cc" ]
}

# NOTE: this target should only be used directly by implementors of the
# `dispatcher` facade.
pw_source_set("dispatcher_base") {
  public_configs = [ ":public_include_path" ]
  public_deps = [
    ":poll",
    "$dir_pw_assert",
    "$dir_pw_chrono:system_clock",
    "$dir_pw_sync:interrupt_spin_lock",
    "$dir_pw_sync:lock_annotations",
    "$dir_pw_toolchain:no_destructor",
  ]
  deps = [ "$dir_pw_assert:check" ]
  public = [ "public/pw_async2/dispatcher_base.h" ]
  sources = [ "dispatcher_base.cc" ]
}

pw_facade("dispatcher") {
  backend = pw_async2_DISPATCHER_BACKEND
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_async2/dispatcher.h" ]
  public_deps = [ ":dispatcher_base" ]
}

pw_test("dispatcher_test") {
  enable_if = pw_async2_DISPATCHER_BACKEND != "" &&
              pw_chrono_SYSTEM_CLOCK_BACKEND != "" &&
              pw_sync_INTERRUPT_SPIN_LOCK_BACKEND != "" &&
              pw_sync_TIMED_THREAD_NOTIFICATION_BACKEND != ""
  deps = [
    ":dispatcher",
    "$dir_pw_containers:vector",
  ]
  sources = [ "dispatcher_test.cc" ]
}

pw_test_group("tests") {
  tests = [
    ":dispatcher_test",
    ":poll_test",
  ]
}

pw_doc_group("docs") {
  sources = [ "docs.rst" ]
}
