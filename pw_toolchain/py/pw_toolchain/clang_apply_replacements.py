#!/usr/bin/env python3

# Copyright 2024 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.
"""Applies clang-tidy suggested fixes.

This uses the clang-apply-replacements tool to apply code changes described in
a YAML file generated by clang-tidy.
"""

import argparse
from pathlib import Path


# pylint: disable=unused-argument
def apply_replacements(
    root: Path, remove_change_desc_files: bool, raise_insert_conflict: bool
) -> int:
    # TODO(slliu) - Modify fix files to change includes from <pw_.*> to "pw_.*"
    # TODO(slliu) - Call clang-apply-replacements
    return 0


def arguments() -> argparse.ArgumentParser:
    """Creates an argument parser for clang-apply-replacements tool."""

    parser = argparse.ArgumentParser(description=__doc__)

    def existing_path(arg: str) -> Path:
        path = Path(arg)
        if not path.is_dir():
            raise argparse.ArgumentTypeError(
                f'{arg} is not a path to a directory'
            )

        return path

    parser.add_argument(
        'root',
        nargs='+',
        type=existing_path,
        help=(
            'Root directory that clang-apply-replacements will recursively '
            'search under for the YAML fix files generated by clang-tidy.'
        ),
    )

    parser.add_argument(
        '--remove-change-desc-files',
        action=argparse.BooleanOptionalAction,
        default=True,
        help=(
            'Remove the change description files regardless of successful '
            'merging/replacing.'
        ),
    )

    parser.add_argument(
        '--raise-insert-conflict',
        action=argparse.BooleanOptionalAction,
        default=True,
        help='Do not ignore insert conflicts.',
    )

    return parser


def main() -> int:
    """Check and fix formatting for source files."""
    return apply_replacements(**vars(arguments().parse_args()))
