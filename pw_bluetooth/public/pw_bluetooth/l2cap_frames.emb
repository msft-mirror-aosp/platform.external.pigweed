# Copyright 2024 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

# This file contains Emboss definitions for the logical link control and
# adaptation protocol (l2cap) frames found in the Bluetooth core specification.
# The Emboss compiler is used to generate a C++ header from this file.

[$default byte_order: "LittleEndian"]
[(cpp) namespace: "pw::bluetooth::emboss"]
# ========================= Data Packet Format =================================
# Core Spec v6.0 Vol 3, Part A, Section 3


struct BasicL2capHeader:
  0     [+2]  UInt  pdu_length
    -- For B-frames, the PDU Length equals the payload size.

  $next [+2]  UInt  channel_id
    -- The channel ID (CID) identifies the destination channel endpoint of the
    -- packet.
    [requires: this != 0]


struct BFrame:
  -- Defined in Core Spec v6.0 Vol 3, Part A, Section 3.1.
  0     [+BasicL2capHeader.$size_in_bytes]  BasicL2capHeader    header
  let pdu_length = header.pdu_length
  let channel_id = header.channel_id
  $next [+pdu_length]                       UInt:8[pdu_length]  payload


struct BFrameHeader:
  # TODO: b/364711772 - Migrate clients to `BFrame` & delete.
  -- 3.1
  -- A frame header for a B-Frame.
  -- In basic L2CAP mode, the L2CAP PDU on a connection-oriented channel is also
  -- referred to as a "B-frame".
  0     [+2]  UInt  pdu_length
    -- For B-frames, the PDU Length equals the payload size.

  $next [+2]  UInt  channel_id
    -- The channel ID (CID) identifies the destination channel endpoint of the
    -- packet.


struct FirstKFrame:
  -- Defined in Core Spec v6.0 Vol 3, Part A, Section 3.4.
  [requires: 0 <= payload_size <= 65533]
  0     [+BasicL2capHeader.$size_in_bytes]  BasicL2capHeader      header
  let pdu_length = header.pdu_length
  let channel_id = header.channel_id
  let payload_size = pdu_length-2
  $next [+2]                                UInt                  sdu_length
    -- The first K-Frame of an SDU contains an SDU length field following the
    -- L2CAP header. Subsequent frames that are part of the same SDU do not
    -- contain the SDU length field.

  $next [+payload_size]                     UInt:8[payload_size]  payload


struct SubsequentKFrame:
  -- Defined in Core Spec v6.0 Vol 3, Part A, Section 3.4.
  [requires: 0 <= payload_size <= 65533]
  0     [+BasicL2capHeader.$size_in_bytes]  BasicL2capHeader      header
  let pdu_length = header.pdu_length
  let channel_id = header.channel_id
  let payload_size = pdu_length
  $next [+payload_size]                     UInt:8[payload_size]  payload


struct KFrameSduHeader:
  #  TODO: b/364711772 - Migrate clients to `FirstKFrame` & delete.
  -- 3.4.2
  -- A frame header for a K-Frame (credit based flow control) SDU.
  0 [+2]  UInt  sdu_length


struct KFramePduHeader:
  # TODO: b/364711772 - Migrate clients to `SubsequentKFrame` & delete.
  -- 3.4.1
  -- A frame header for a K-Frame (credit based flow control) PDU.
  0     [+2]  UInt  pdu_length
  $next [+2]  UInt  channel_id

# ====================== Signaling Packet Formats ==============================
# Core Spec v6.0 Vol 3, Part A, Section 4


enum L2capSignalingPacketCode:
  -- Possible values for the Code field of an L2CAP C-frame. See Core Spec v5.4,
  -- Vol 3, Part A, Table 4.2 for a list of the codes.
  [maximum_bits: 8]
  COMMAND_REJECT_RSP              = 0x01
  CONNECTION_REQ                  = 0x02
  CONNECTION_RSP                  = 0x03
  CONFIGURATION_REQ               = 0x04
  CONFIGURATION_RSP               = 0x05
  DISCONNECTION_REQ               = 0x06
  DISCONNECTION_RSP               = 0x07
  ECHO_REQ                        = 0x08
  ECHO_RSP                        = 0x09
  INFORMATION_REQ                 = 0x0A
  INFORMATION_RSP                 = 0x0B
  CONNECTION_PARAMETER_UPDATE_REQ = 0x12
  CONNECTION_PARAMETER_UPDATE_RSP = 0x13
  LE_CREDIT_BASED_CONNECTION_REQ  = 0x14
  LE_CREDIT_BASED_CONNECTION_RSP  = 0x15
  FLOW_CONTROL_CREDIT_IND         = 0x16
  CREDIT_BASED_CONNECTION_REQ     = 0x17
  CREDIT_BASED_CONNECTION_RSP     = 0x18
  CREDIT_BASED_RECONFIGURE_REQ    = 0x19
  CREDIT_BASED_RECONFIGURE_RSP    = 0x1A

enum L2capFixedPsmCode:
  -- Possible fixed values for PSM or SPSM as assigned by Bluetooth SIG. See
  -- Core Spec v5.4, Vol 3, Part A, Section 4.2 and Assigned_Numbers Section 2.5
  [maximum_bits: 16]
  SDP     = 0x0001 # PSM
  RFCOMM  = 0x0003 # PSM
  ATT     = 0x001F # PSM
  EATT    = 0x0027 # PSM or SPSM

struct CFrame:
  -- A Control Frame (C-frame) contains L2CAP signaling commands exchanged
  -- between peer L2CAP entities. C-frames are exclusively used on the L2CAP
  -- signaling channels.
  0     [+BasicL2capHeader.$size_in_bytes]  BasicL2capHeader    header
  let pdu_length = header.pdu_length
  let channel_id = header.channel_id
  $next [+pdu_length]                       UInt:8[pdu_length]  payload


struct L2capSignalingCommandHeader:
  -- C-frame refers to an L2CAP PDU payload containing one or more signaling
  -- commands.
  0     [+1]  L2capSignalingPacketCode  code
  $next [+1]  UInt                      identifier
    -- Matches responses with requests.

  $next [+2]  UInt                      data_length


struct L2capLeCreditBasedConnectionReq:
  -- Section 4.22
  -- L2CAP_LE_CREDIT_BASED_CONNECTION_REQ packets are sent to create and
  -- configure an L2CAP channel between two devices using LE Credit Based Flow
  -- Control mode.
  0     [+L2capSignalingCommandHeader.$size_in_bytes]  L2capSignalingCommandHeader  command_header
    -- `code` is expected to be LE_CREDIT_BASED_CONNECTION_REQ

  $next [+2]                                           UInt                         spsm
    -- Simplified Protocol/Service Multiplexer.

  $next [+2]                                           UInt                         source_cid
    -- Channel endpoint on the device sending the request.

  let min_mtu = 23
  $next [+2]                                           UInt                         mtu
    -- Maximum Transmission Unit
    [requires: this >= L2capLeCreditBasedConnectionReq.min_mtu]

  let min_mps = 23
  let max_mps = 65533
  $next [+2]                                           UInt                         mps
    -- Maximum PDU Payload Size
    [requires: L2capLeCreditBasedConnectionReq.min_mps <= this <= L2capLeCreditBasedConnectionReq.max_mps]

  let max_credit_value = 65535
  $next [+2]                                           UInt                         initial_credits
    [requires: this <= L2capLeCreditBasedConnectionReq.max_credit_value]
