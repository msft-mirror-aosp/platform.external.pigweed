.. _module-pw_ide-guide-vscode:

==================
Visual Studio Code
==================
.. pigweed-module-subpage::
   :name: pw_ide

.. toctree::
   :maxdepth: 1
   :hidden:

   extension_enforcement
   troubleshooting
   legacy
   development

Pigweed provides rich and robust support for development in `Visual Studio Code <https://code.visualstudio.com/>`_,
including:

* High-quality C/C++ code intelligence for embedded systems projects using `clangd <https://clangd.llvm.org/>`_
  integrated directly with your project's Bazel build graph

* Bundled core Bazel tools, letting you get started immediately without the need
  to install global system dependencies

* Interactive browsing, building, and running Bazel targets

.. note::

   Currently, this document only applies to :ref:`Bazel projects<module-pw_ide-design-projects-bazel>`.
   We're working on adding support for :ref:`bootstrap projects<module-pw_ide-design-projects-bootstrap>`.
   In the meantime, bootstrap projects can use the :ref:`command-line interface<module-pw_ide-guide-cli>`
   with the :ref:`legacy support for Visual Studio Code<module-pw_ide-guide-vscode-legacy>`.

Getting started
===============
All you need to do is install the `Pigweed extension <http://localhost/404>`_ from the extension
marketplace. If you start your project from one of Pigweed's quickstart or
showcase example projects, you will be prompted to install the extension as soon
as you open the project.

Once installed, the Pigweed extension will do a few things for you automatically
when you open :ref:`Pigweed projects<module-pw_ide-design-projects>`:

* The Bazel extension will discover all of the targets in your project

* The Pigweed extension will generate `compilation databases <https://clangd.llvm.org/design/compile-commands>`_
  for the :ref:`target groups<module-pw_ide-design-cpp-target-groups>`
  in your project.

You can now select a target group from the status bar item at the bottom
of your window or by running the ``Pigweed: Select Code Analysis Target``
command.

Once you select a target group, the ``clangd`` extension will be automatically
configured to use the ``clang`` toolchain in the Bazel environment and the
compilation database associated with the selected target group.

What this gives you
-------------------
Here's a non-exhaustive list of cool features you can now enjoy:

* Code navigation, including routing through facades to the correct backend

* Code completion, including correct class members and function signatures

* Tooltips with docs, inferred types for ``auto``, inferred values for ``constexpr``,
  data type sizes, etc.

* Compiler errors and warnings as you write your code

* Code formatting via the standard ``Format ...`` commands, including
  Starlark files

* Linting and debugging for Starlark files

* A tree view of all Bazel targets, allowing you to build or run them directly

Commands
========
Access commands by opening the command palette :kbd:`Ctrl+Shift+P`
(:kbd:`Cmd+Shift+P` on Mac).

.. describe:: Pigweed: Check Extensions

   The Pigweed extension lets development teams maintain a consistent
   development environment for all members of the team by ensuring that the
   recommendations in ``extensions.json`` are enforced. Learn more at
   :ref:`extension enforcement<module-pw_ide-guide-vscode-extension-enforcement>`.

.. describe:: Pigweed: File Bug

   Found a problem in the Pigweed Visual Studio Code extension, other Pigweed
   tools, or Pigweed itself? Add a bug to our bug tracker to help us fix it.

.. describe:: Pigweed: Open Output Panel

   Opens the Pigweed output panel, which contains diagnostic output generated by
   the Pigweed extension. This is a good first place to look if things go wrong.

.. _module-pw_ide-guide-vscode-commands-refresh-compile-commands:

.. describe:: Pigweed: Refresh Compile Commands

   Manually trigger a refresh of the compilation databases used for C/C++ code
   intelligence. Normally, the databases are refreshed automatically when build
   files are changed, but if you have
   :ref:`automatic refreshing disabled<module-pw_ide-guide-vscode-settings-disable-compile-commands-file-watcher>`
   or need to refresh outside of the automatic cycle, this command will refresh
   manually.

.. describe:: Pigweed: Refresh Compile Commands and Set Code Analysis Target

   This is the same as the :ref:`Pigweed: Refresh Compile Commands<module-pw_ide-guide-vscode-commands-refresh-compile-commands>`,
   except that it also triggers :ref:`Pigweed: Select Code Analysis Target<module-pw_ide-guide-vscode-commands-select-target>`
   after the refresh is complete.

.. _module-pw_ide-guide-vscode-commands-select-target:

.. describe:: Pigweed: Select Code Analysis Target

   Select the target group that ``clangd`` should use for code analysis.

.. describe:: Pigweed: Set Bazel Recommended Settings

   Configure Visual Studio Code to use Pigweed's recommended Bazel settings.
   Note that these settings are only applied to the *project* settings, so they
   don't affect any other project's settings, or your user settings.

   * Sets the Buildifier path to the version bundled with the Pigweed extension, enabling Starlark code intelligence

   * Enables Bazel CodeLens support, allowing you to build and run targets directly from Bazel files

.. describe:: Pigweed: Set Bazelisk Path

   Pigweed recommends using `Bazelisk <https://github.com/bazelbuild/bazelisk>`_
   instead of plain Bazel to ensure that the right version of Bazel is used.
   This command allows you to set the path to Bazelisk, selecting from versions
   installed on your system or the version bundled with the Pigweed extension.

.. describe:: Pigweed: Activate Bazelisk in Terminal

   This will change the `$PATH` of your active integrated terminal to include
   the path to Bazelisk configured in your editor settings. This allows you to
   run Bazel actions via Visual Studio Code commands or via `bazelisk ...`
   invocations in the integrated terminal, while working in the same Bazel
   environment.

Configuration options
=====================

.. py:data:: pigweed.codeAnalysisTarget
   :type: string

   The build target to use for editor code intelligence

.. warning::

   You should only set this value by running the :ref:`Pigweed\: Select Code Analysis Target<module-pw_ide-guide-vscode-commands-select-target>`.
   The command has other configuration side-effects that won't be triggered if
   you manually set the value in ``settings.json``.

.. py:data:: pigweed.disableBazelSettingsRecommendation
   :type: boolean
   :value: false

   Disable reminders to use Pigweed's Bazel settings recommendations

.. py:data:: pigweed.disableBazeliskCheck
   :type: boolean
   :value: false

   Disable the recommendation to use Bazelisk

.. _module-pw_ide-guide-vscode-settings-disable-compile-commands-file-watcher:

.. py:data:: pigweed.disableCompileCommandsFileWatcher
   :type: boolean
   :value: false

   Disable automatically refreshing compile commands

.. _module-pw_ide-guide-vscode-settings-enforce-extension-recommendations:

.. py:data:: pigweed.enforceExtensionRecommendations
   :type: boolean
   :value: false

   Require installing and disabling extensions recommended in ``extensions.json``

.. _module-pw_ide-guide-vscode-settings-project-root:

.. py:data:: pigweed.projectRoot
   :type: string

   The root of the Pigweed project source directory

.. _module-pw_ide-guide-vscode-settings-project-type:

.. py:data:: pigweed.projectType
   :type: bootstrap or bazel

   The type of Pigweed project, either bootstrap or Bazel

.. py:data:: pigweed.refreshCompileCommandsTarget
   :type: string
   :value: //:refresh_compile_commands

   The Bazel target to run to refresh compile commands
