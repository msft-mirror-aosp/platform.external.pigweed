# Copyright 2021 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pw_build/module_config.gni")
import("$dir_pw_build/target_types.gni")
import("$dir_pw_docgen/docs.gni")

if (current_toolchain == get_path_info(
        "$dir_pigweed/targets/stm32f429i_disc1_stm32cube:stm32f429i_disc1_stm32cube.size_optimized",
        "abspath")) {
  declare_args() {
    # The build target that overrides the default configuration options for this
    # module. This should point to a source set that provides defines through a
    # public config (which may -include a file or add defines directly).
    pw_system_CONFIG = pw_build_DEFAULT_MODULE_CONFIG
  }

  config("public_include_path") {
    include_dirs = [ "public" ]
  }

  pw_source_set("config") {
    sources = [ "public/pw_system/config.h" ]
    public_configs = [ ":public_include_path" ]
    public_deps = [ pw_system_CONFIG ]
    visibility = [ "./*" ]
    friend = [ "./*" ]
  }

  pw_source_set("log") {
    public_configs = [ ":public_include_path" ]
    sources = [
      "log.cc",
      "pw_system_private/log.h",
    ]
    public_deps = [
      ":config",
      "$dir_pw_log_rpc:log_service",
      "$dir_pw_log_rpc:rpc_log_drain_thread",
    ]
    deps = [
      ":rpc",
      "$dir_pw_bytes",
      "$dir_pw_log",
      "$dir_pw_log:proto_utils",
      "$dir_pw_log_rpc:rpc_log_drain",
      "$dir_pw_log_tokenized:metadata",
      "$dir_pw_multisink",
      "$dir_pw_result",
      "$dir_pw_sync:interrupt_spin_lock",
      "$dir_pw_sync:lock_annotations",
      "$dir_pw_sync:mutex",
      "$dir_pw_tokenizer",
    ]
  }

  pw_source_set("rpc") {
    visibility = [ ":*" ]
    sources = [
      "pw_system_private/rpc.h",
      "rpc.cc",
    ]
    public_configs = [ ":public_include_path" ]
    public_deps = [
      ":config",
      "$dir_pw_rpc/system_server:facade",
      "$dir_pw_thread:thread_core",
    ]
    deps = [
      ":io",
      ":target_io",  # This should be provided by the target.
      "$dir_pw_assert",
      "$dir_pw_hdlc:pw_rpc",
      "$dir_pw_hdlc:rpc_channel_output",
      "$dir_pw_rpc:synchronized_channel_output",
      "$dir_pw_sync:mutex",
    ]
  }

  pw_source_set("io") {
    visibility = [ ":*" ]
    public_configs = [ ":public_include_path" ]
    public = [ "public/pw_system/io.h" ]
    public_deps = [ "$dir_pw_stream" ]
  }

  pw_source_set("init") {
    public_configs = [ ":public_include_path" ]
    public = [ "public/pw_system/init.h" ]
    sources = [ "init.cc" ]
    deps = [
      ":log",
      ":rpc",
      "$dir_pw_rpc/nanopb:echo_service",
      "$dir_pw_thread_freertos:thread",
    ]
  }

  # TODO(cachinchilla): Make the target provide this.
  pw_source_set("target_io") {
    sources = [ "target_io.cc" ]
    deps = [
      ":io",
      "$dir_pw_stream",
      "$dir_pw_stream:sys_io_stream",
      "$dir_pw_thread_freertos:thread",
    ]
  }

  # TODO(cachinchilla): Make the target provide this.
  pw_source_set("target_thread_options") {
    public = [ "public/pw_system/thread_options.h" ]
    deps = [ "$dir_pw_thread_freertos:thread" ]
  }
}

pw_doc_group("docs") {
  sources = [ "docs.rst" ]
}
