# Copyright 2019 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

load(
    "//pw_build:pigweed.bzl",
    "pw_cc_blob_info",
    "pw_cc_blob_library",
    "pw_cc_test",
)

package(default_visibility = ["//visibility:public"])

licenses(["notice"])

config_setting(
    name = "kythe",
    values = {
        "define": "kythe_corpus=pigweed.googlesource.com/pigweed/pigweed",
    },
)

pw_cc_blob_info(
    name = "test_blob_aligned",
    alignas = "512",
    file_path = "test_blob_0123.bin",
    symbol_name = "kFirstBlob0123",
)

pw_cc_blob_info(
    name = "test_blob_unaligned",
    file_path = "test_blob_0123.bin",
    symbol_name = "kSecondBlob0123",
)

pw_cc_blob_library(
    name = "test_blob",
    blobs = [
        ":test_blob_aligned",
        ":test_blob_unaligned",
    ],
    namespace = "test::ns",
    out_header = "pw_build/test_blob.h",
)

pw_cc_test(
    name = "cc_blob_library_test",
    srcs = ["cc_blob_library_test.cc"],
    deps = [":test_blob"],
)

# Bazel produces root-relative file paths without the -ffile-prefix-map option.
pw_cc_test(
    name = "file_prefix_map_test",
    srcs = [
        "file_prefix_map_test.cc",
        "pw_build_private/file_prefix_map_test.h",
    ],
    defines = [
        "PW_BUILD_EXPECTED_HEADER_PATH=\\\"pw_build/pw_build_private/file_prefix_map_test.h\\\"",
        "PW_BUILD_EXPECTED_SOURCE_PATH=\\\"pw_build/file_prefix_map_test.cc\\\"",
    ],
)

# Special target that may be used instead of a cc_library as the default
# condition in backend multiplexer select statements.  This produces better
# error messages than e.g. using an invalid label.
#
# If you're a user whose build errored out because a library transitively
# depended on this target: the platform you're targeting did not specify which
# backend to use for some facade. Look at the previous step in the dependency
# chain (printed with the error) to figure out which one.
cc_library(
    name = "unspecified_backend",
    target_compatible_with = ["@platforms//:incompatible"],
)
