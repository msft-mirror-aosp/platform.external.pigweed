# Copyright 2024 The Pigweed Authors
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not
# use this file except in compliance with the License. You may obtain a copy of
# the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations under
# the License.

import("//build_overrides/pigweed.gni")

import("$dir_pw_build/target_types.gni")
import("$dir_pw_unit_test/test.gni")

config("public_include_path") {
  include_dirs = [ "public" ]
  visibility = [ ":*" ]
}

pw_source_set("result") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_allocator/block/result.h" ]
  public_deps = [
    "$dir_pw_allocator:config",
    "$dir_pw_assert",
    "$dir_pw_status",
  ]
}

pw_source_set("alignable") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_allocator/block/alignable.h" ]
  public_deps = [
    ":allocatable",
    "$dir_pw_allocator:deallocator",
    "$dir_pw_assert",
    "$dir_pw_bytes:alignment",
    "$dir_pw_status",
    "$dir_pw_third_party/fuchsia:stdcompat",
  ]
}

pw_source_set("allocatable") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_allocator/block/allocatable.h" ]
  public_deps = [
    ":contiguous",
    ":result",
    "$dir_pw_allocator:deallocator",
    "$dir_pw_assert",
    "$dir_pw_bytes:alignment",
    "$dir_pw_status",
  ]
}

pw_source_set("basic") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_allocator/block/basic.h" ]
  sources = [ "basic.cc" ]
  public_deps = [
    "$dir_pw_allocator:config",
    "$dir_pw_assert",
    "$dir_pw_bytes:alignment",
    "$dir_pw_third_party/fuchsia:stdcompat",
  ]
}

pw_source_set("contiguous") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_allocator/block/contiguous.h" ]
  sources = [ "contiguous.cc" ]
  public_deps = [
    ":basic",
    "$dir_pw_bytes",
    "$dir_pw_result",
    "$dir_pw_status",
    "$dir_pw_third_party/fuchsia:stdcompat",
  ]
}

pw_source_set("iterable") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_allocator/block/iterable.h" ]
  public_deps = [ ":contiguous" ]
}

pw_source_set("poisonable") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_allocator/block/poisonable.h" ]
  sources = [ "poisonable.cc" ]
  public_deps = [
    ":contiguous",
    "$dir_pw_allocator:config",
    "$dir_pw_third_party/fuchsia:stdcompat",
  ]
}

pw_source_set("with_layout") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_allocator/block/with_layout.h" ]
  public_deps = [
    ":alignable",
    "$dir_pw_allocator:deallocator",
    "$dir_pw_assert",
  ]
}

pw_source_set("detailed_block") {
  public_configs = [ ":public_include_path" ]
  public = [ "public/pw_allocator/block/detailed_block.h" ]
  public_deps = [
    ":alignable",
    ":allocatable",
    ":basic",
    ":contiguous",
    ":iterable",
    ":poisonable",
    ":with_layout",
    "$dir_pw_allocator:config",
    "$dir_pw_allocator:deallocator",
    dir_pw_assert,
    dir_pw_bytes,
    dir_pw_preprocessor,
    dir_pw_result,
    dir_pw_status,
  ]
}

pw_source_set("testing") {
  public = [ "public/pw_allocator/block/testing.h" ]
  public_deps = [
    "$dir_pw_allocator:testing",
    "$dir_pw_bytes:alignment",
    "$dir_pw_third_party/fuchsia:stdcompat",
    dir_pw_assert,
    dir_pw_status,
  ]
}

pw_test("result_test") {
  deps = [
    ":basic",
    ":result",
  ]
  sources = [ "result_test.cc" ]
}

pw_test("detailed_block_test") {
  deps = [
    ":testing",
    "$dir_pw_third_party/fuchsia:stdcompat",
    dir_pw_span,
  ]
  sources = [ "detailed_block_test.cc" ]
}

pw_test_group("tests") {
  tests = [
    ":detailed_block_test",
    ":result_test",
  ]
}
